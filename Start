#include <iostream>
#include <string>
using namespace std;
#define MAX 100

enum ADN{A=0, T, C, G};
int ADN[MAX];

void declarare(int n, int ADN[]);
void show(int n, int ADN[]);
char Value(int v);
int* NOT(int v[]);
int* AND(int v1[], int v2[]);
int* OR(int v1[], int v2[]);
int* XOR(int v1[], int v2[]);
int* Adunare(int v1[], int v2[]);
int* Scadere(int v1[], int v2[]);
int* Transformate(int numar);
int Transformare(int numar[]);
int CautareBinara(int ADN[], int search[]);
int* Sortare(int ADN[]);

int main()
{
  int n;
  cout << "Introdu un numar: " << endl;
  cin >> n;
  if( n/4 < MAX){
    declarare(n, ADN);
    show(n, ADN);
  }
  else
  {
    cout << "Nu este un numar bun" << endl;   
  }
}

void declarare(int n, int ADN[])
{
    int k=4*n;   // pentru a ne usura calculele vom folosi numai numere divizibile cu 4
    for(int i=0; i < k ; i++){
        char x ;
        cout << "Da o valoare pentru catena de ADN (A, T, C sau G)" << endl;
        while(1){
            cin >> x;
            if( x == 'A')
            {
                ADN[i] = A;
                break;
            }
            else if( x == 'T')
            {
                 ADN[i] = T;
                 break;
            }
            else if( x == 'G')
            {
                 ADN[i] = G;
                 break;
            }
            else if( x == 'C')
            {
                 ADN[i] = C;
                 break;
            }
            else
            {
                cout << "Nu a fost o valoare buna. Mai incearca odata" << endl;
            }
        }
    }
}

void show(int n, int ADN[])
{
    int k=4*n;
    cout << "Datele de ADN sunt: ";
    for(int i=0; i <k; i++)
    {
        cout << Value(ADN[i]);
    }
    cout << endl;
}

char Value(int v)
{
    if( v == 0 )
    {
        return 'A';
    }
    else if( v == 1)
    {
         return 'T';
    }
    else if( v == 3)
    {
         return 'G';
    }
    else if( v == 2 )
    {
         return 'C';
    }
    return '0';
}

int* Transformare(int numar){
  //completeaza individual
}
int Transformare(int numar[]){
  //completeaza individual
}
int* NOT(int v[]){
    //completeaza individual
}
int* AND(int v1[], int v2[]){
    //completeaza individual
}
int* OR(int v1[], int v2[]){
    //completeaza individual
}
int* XOR(int v1[], int v2[]){
    //completeaza individual
}
int* Adunare(int v1[], int v2[]){
    // ADAUGA ADUNAREA PENTRU VALORI DE ORDIN 4 CARE NU DEPASESC 4 UNITATI
}
int* Scadere(int v1[], int v2[]){
     // ADAUGA SCADERE PENTRU VALORI DE ORDIN 4 CARE NU DEPASESC 4 UNITATI
}

// Vectorul search are intotdeauna 4 cifre
// Un element al vectorului ADN[] este considerat numarul dintre i1 = 4*j si i2 = 4*j + 3 inclusiv
// Ordinea de citire e de la stanga la dreapta. Deci: AATC = 1 * 4^1 + 2 * 4^0 = 6
// Realizati o cautare binara 
int CautareBinara(int ADN[], int search[]){
  // Realizati o cautare binara 
}

int* sortare(int ADN[]){
  // Sortati (pe catene de cate patru) vectorul dat
}

int* Interclasare(int ADN[], int ADN_nou[]){
  //Cei doi vectori sunt sortati (pe catene de cate patru). Interclasati cei doi vectori
}
